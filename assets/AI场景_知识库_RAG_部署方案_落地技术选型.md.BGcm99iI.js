import{_ as e,c as t,a0 as l,o as r}from"./chunks/framework.OqxnQCTf.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"AI场景/知识库/RAG/部署方案/落地技术选型.md","filePath":"AI场景/知识库/RAG/部署方案/落地技术选型.md"}'),i={name:"AI场景/知识库/RAG/部署方案/落地技术选型.md"};function o(n,a,s,d,c,h){return r(),t("div",null,a[0]||(a[0]=[l('<h2 id="企业-rag-知识库落地" tabindex="-1">企业 RAG 知识库落地 <a class="header-anchor" href="#企业-rag-知识库落地" aria-label="Permalink to &quot;企业 RAG 知识库落地&quot;">​</a></h2><h3 id="直接使用高层级开源框架" tabindex="-1">直接使用高层级开源框架 <a class="header-anchor" href="#直接使用高层级开源框架" aria-label="Permalink to &quot;直接使用高层级开源框架&quot;">​</a></h3><p>这类框架如 RAGFlow, Dify, FastGPT 等</p><ul><li>主要特点是提供相对完整、开箱即用的 RAG 工作流，目标是简化 RAG 应用的搭建过程，降低开发门槛。</li><li>反之，劣势主要是定制化和灵活性受限，深度优化和集成特定组件时复杂度较高</li></ul><h3 id="底层开发框架自主开发" tabindex="-1">底层开发框架自主开发 <a class="header-anchor" href="#底层开发框架自主开发" aria-label="Permalink to &quot;底层开发框架自主开发&quot;">​</a></h3><p>这类框架包括 LangChain, LlamaIndex, Haystack 等，都提供了一系列模块化的构建块、工具和接口，开发者可以根据需求灵活组合和编排 RAG 流程的各个环节（如数据加载、文本分割、嵌入、向量存储、检索策略、LLM 调用、记忆管理、Agent 构建等）。</p><ul><li>优势很明显就是灵度灵活，定制化能力强，能够针对特定业务场景进行深度优化和集成。适合对 RAG 流程有精细化控制需求的企业。</li><li>反之劣势就是需要更多的开发工作量和技术深度</li></ul><h3 id="云厂商-maas-平台方案" tabindex="-1">云厂商 MaaS 平台方案 <a class="header-anchor" href="#云厂商-maas-平台方案" aria-label="Permalink to &quot;云厂商 MaaS 平台方案&quot;">​</a></h3><p>如阿里云百炼, 百度智能云千帆, AWS Bedrock, Google Vertex AI Search 等的私有化部署方案，无论是国内还是国外的这些云服务商，都是把 RAG 相关的能力封装成服务或提供私有化部署包，通常与自家的大模型、计算资源、数据存储等深度集成。一般也会提供模型选择、微调、部署、监控等一站式服务。</p><ul><li>采用这种方案通常能提供稳定的基础设施、便捷的模型管理和部署、以及与其他云服务的良好兼容性。对于已经深度使用特定云生态的企业来说，集成成本较低。</li><li>但劣势就如同使用大模型一体机一样，可能存在厂商锁定的风险，跨云迁移或集成非该厂商的服务可能会比较复杂。当然，费用和灵活性也需要考虑。</li></ul>',10)]))}const A=e(i,[["render",o]]);export{p as __pageData,A as default};
