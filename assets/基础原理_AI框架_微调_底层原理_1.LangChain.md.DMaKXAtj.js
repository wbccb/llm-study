import{_ as i,c as a,a0 as n,o as t}from"./chunks/framework.OqxnQCTf.js";const g=JSON.parse('{"title":"RAG","description":"","frontmatter":{},"headers":[],"relativePath":"基础原理/AI框架&微调&底层原理/1.LangChain.md","filePath":"基础原理/AI框架&微调&底层原理/1.LangChain.md"}'),h={name:"基础原理/AI框架&微调&底层原理/1.LangChain.md"};function l(e,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="rag" tabindex="-1">RAG <a class="header-anchor" href="#rag" aria-label="Permalink to &quot;RAG&quot;">​</a></h1><ol><li>数据获取</li><li>数据切分</li><li>数据切分后转化为向量存储</li><li>根据存储的向量进行RAG检索</li></ol><h2 id="rag外部数据获取" tabindex="-1">RAG外部数据获取 <a class="header-anchor" href="#rag外部数据获取" aria-label="Permalink to &quot;RAG外部数据获取&quot;">​</a></h2><h3 id="本地文件解析为document对象" tabindex="-1">本地文件解析为Document对象 <a class="header-anchor" href="#本地文件解析为document对象" aria-label="Permalink to &quot;本地文件解析为Document对象&quot;">​</a></h3><p>Document对象：</p><ul><li>pageContent 文本内容，即文档对象对应的文本数据</li><li>metadata 元数据，文本数据对应的元数据，例如 原始文档的标题、页数等信息</li></ul><ol><li>TextLoader：解析txt文件</li><li>PDFLoader：解析pdf文件</li><li>DirectoryLoader：解析多种格式的文件夹</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { DirectoryLoader } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;langchain/document_loaders/fs/directory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectoryLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;./data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;.pdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PDFLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, { splitPages: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="web-loader" tabindex="-1">Web Loader <a class="header-anchor" href="#web-loader" aria-label="Permalink to &quot;Web Loader&quot;">​</a></h3><ol><li>Github loader：使用<code>github API</code>获取某一个开源项目的代码</li><li>WebLoader：使用 <code>Cheerio</code> 用来提取和处理 html 内容，类似于 python 中的 BeautifulSoup</li><li>Search API：使用<code>SearchApiLoader</code>可以进行google搜索，并且会爬取每个结果的汇总和信息放在pageContent</li></ol><h2 id="rag切分数据" tabindex="-1">RAG切分数据 <a class="header-anchor" href="#rag切分数据" aria-label="Permalink to &quot;RAG切分数据&quot;">​</a></h2><p>切分函数最核心的两个参数是 chunkSize 和 chunkOverlap</p><blockquote><p>先设定为默认的 1000 和 200，然后使用 ChunkViz 去检查部分结果是否符合预期，然后根据人类对语意的理解去调整到一个合适的值</p><p><a href="https://chunkviz.up.railway.app/" target="_blank" rel="noreferrer">https://chunkviz.up.railway.app/</a></p></blockquote><h2 id="rag的向量操作类vector-store" tabindex="-1">RAG的向量操作类Vector store <a class="header-anchor" href="#rag的向量操作类vector-store" aria-label="Permalink to &quot;RAG的向量操作类Vector store&quot;">​</a></h2><h3 id="存储向量" tabindex="-1">存储向量 <a class="header-anchor" href="#存储向量" aria-label="Permalink to &quot;存储向量&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../data/kong.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> splitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecursiveCharacterTextSplitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkOverlap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> splitDocs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> splitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitDocuments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(docs);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> embeddings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIEmbeddings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vectorStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FaissStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromDocuments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(splitDocs, embeddings);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../db/xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vectorStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directory);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="读取向量并提问" tabindex="-1">读取向量并提问 <a class="header-anchor" href="#读取向量并提问" aria-label="Permalink to &quot;读取向量并提问&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取存储的向量数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../db/xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> embeddings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIEmbeddings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vectorstore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FaissStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directory, embeddings);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提问</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> retriever</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vectorstore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asRetriever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retriever.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;茴香豆是做什么用的&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>返回值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;有喝酒的人便都看着他笑，有的叫道，“孔乙己，你脸上又添上新伤疤了！”他不回答，对柜里说，“温两碗酒，要一碟茴香豆。”便排出九文大钱。他们又故意的高声嚷道，“你一定又偷了人家的东西了！”孔乙己睁大眼睛说&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        metadata: { source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../data/kong.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loc: [Object] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pageContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;有几回，邻居孩子听得笑声，也赶热闹，围住了孔乙己。他便给他们一人一颗。孩子吃完豆，仍然不散，眼睛都望着碟子。孔乙己着了慌，伸开五指将碟子罩住，弯腰下去说道，“不多了，我已经不多了。”直起身又看一看豆&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        metadata: { source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../data/kong.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loc: [Object] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="优化rag质量" tabindex="-1">优化RAG质量 <a class="header-anchor" href="#优化rag质量" aria-label="Permalink to &quot;优化RAG质量&quot;">​</a></h2><ol><li>MultiQueryRetriever：将用户的提问使用llm转化为多个相似的提问词，对每一个 query 调用 vector store 的 retriever，也就是，比如1个提问生成3个相似的 query ，会生成 3 * 3 共九个文档结果。 然后咱其中去重，并返回</li><li>Document Compressor：RAG检索出来很多内容，针对内容先进行llm预处理，根据用户提问从文档中提取出最相关的部分，并且强调不要让 LLM 去改动提取出来的部分，来避免 LLM 发挥自己的幻想改动原文，然后将提取精简后的相关文档再进行llm提问时的附带资料</li><li>ScoreThresholdRetriever：设置一定分数进行RAG检索出来的内容的限制，避免输出过多的内容（比如最小的相似度阈值、一次最多返回多少条数据）</li></ol><h1 id="agent" tabindex="-1">Agent <a class="header-anchor" href="#agent" aria-label="Permalink to &quot;Agent&quot;">​</a></h1><ol><li>Function calling: <code>OpenAI</code>如何使用<code>Function calling</code></li><li>Lang Smith打印信息追踪<code>Agent</code>的运行情况</li><li>ReAct框架</li></ol><h2 id="function-calling" tabindex="-1">Function calling <a class="header-anchor" href="#function-calling" aria-label="Permalink to &quot;Function calling&quot;">​</a></h2><blockquote><p><code>Function calling</code>后面OpenAI改名为<code>tools</code></p></blockquote><p>在 langchain 中使用 tools，通过 zod 减少了我们编写 schema 的繁琐</p><p>在 langchain 也可以使用 tools 对数据进行打标签和数据提取</p><h2 id="lang-smith打印信息追踪" tabindex="-1">Lang Smith打印信息追踪 <a class="header-anchor" href="#lang-smith打印信息追踪" aria-label="Permalink to &quot;Lang Smith打印信息追踪&quot;">​</a></h2><h2 id="react框架-流行的agent框架-推理-reasoning-和行动-acting" tabindex="-1">ReAct框架:流行的agent框架-推理（reasoning）和行动（acting） <a class="header-anchor" href="#react框架-流行的agent框架-推理-reasoning-和行动-acting" aria-label="Permalink to &quot;ReAct框架:流行的agent框架-推理（reasoning）和行动（acting）&quot;">​</a></h2><p>跟OpenAI相比较还是比较粗糙，但是值得学习的框架</p><h1 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h1><h2 id="_1-rag-实现一个小说的chatbot" tabindex="-1">1. RAG-实现一个小说的chatbot <a class="header-anchor" href="#_1-rag-实现一个小说的chatbot" aria-label="Permalink to &quot;1. RAG-实现一个小说的chatbot&quot;">​</a></h2><h2 id="_2-rag-实现完整的chain-自动的提问改写、数据检索、聊天记录-部署成api提供给第三方使用" tabindex="-1">2. RAG-实现完整的chain: 自动的提问改写、数据检索、聊天记录 + 部署成API提供给第三方使用 <a class="header-anchor" href="#_2-rag-实现完整的chain-自动的提问改写、数据检索、聊天记录-部署成api提供给第三方使用" aria-label="Permalink to &quot;2. RAG-实现完整的chain: 自动的提问改写、数据检索、聊天记录 + 部署成API提供给第三方使用&quot;">​</a></h2><h2 id="_3-agents-实现一个mbti-chatbot" tabindex="-1">3. Agents-实现一个MBTI-chatbot <a class="header-anchor" href="#_3-agents-实现一个mbti-chatbot" aria-label="Permalink to &quot;3. Agents-实现一个MBTI-chatbot&quot;">​</a></h2><h2 id="_4-agents-实现一个算卦" tabindex="-1">4. Agents-实现一个算卦 <a class="header-anchor" href="#_4-agents-实现一个算卦" aria-label="Permalink to &quot;4. Agents-实现一个算卦&quot;">​</a></h2>`,36)]))}const E=i(h,[["render",l]]);export{g as __pageData,E as default};
