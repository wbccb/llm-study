import{_ as a,c as o,a0 as t,o as r}from"./chunks/framework.OqxnQCTf.js";const p=JSON.parse('{"title":"多模态检索策略","description":"","frontmatter":{},"headers":[],"relativePath":"docs/知识库/RAG/RAGFlow源码分析/检索阶段/2.混合检索策略.md","filePath":"docs/知识库/RAG/RAGFlow源码分析/检索阶段/2.混合检索策略.md"}'),s={name:"docs/知识库/RAG/RAGFlow源码分析/检索阶段/2.混合检索策略.md"};function l(c,e,i,n,d,h){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="多模态检索策略" tabindex="-1">多模态检索策略 <a class="header-anchor" href="#多模态检索策略" aria-label="Permalink to &quot;多模态检索策略&quot;">​</a></h1><blockquote><p>代码路径：rag/retrieval/</p></blockquote><h2 id="_1-混合召回层" tabindex="-1">1.混合召回层 <a class="header-anchor" href="#_1-混合召回层" aria-label="Permalink to &quot;1.混合召回层&quot;">​</a></h2><p>关键词召回 BM25 算法 conf/retrieval/bm25 向量召回 双塔模型（sentence-BERT） models/embedding/ 全文检索 Elasticsearch DSL service_conf.yaml</p><h2 id="_2-重排序机制" tabindex="-1">2.重排序机制 <a class="header-anchor" href="#_2-重排序机制" aria-label="Permalink to &quot;2.重排序机制&quot;">​</a></h2><p>多路分数融合（线性加权/动态调整） 基于 Cohere Rerank 的语义相关性优化 时效性权重调节（对新闻类文档特殊处理）</p><h2 id="_3-缓存优化" tabindex="-1">3.缓存优化 <a class="header-anchor" href="#_3-缓存优化" aria-label="Permalink to &quot;3.缓存优化&quot;">​</a></h2><p>Redis 缓存高频查询结果（docker-compose-base.yml 包含 Redis 服务） 异步预取热点文档向量</p>',8)]))}const m=a(s,[["render",l]]);export{p as __pageData,m as default};
