import{_ as i,c as a,a0 as n,o as h}from"./chunks/framework.OqxnQCTf.js";const E=JSON.parse('{"title":"(WIP)RAGFlow源码分析","description":"","frontmatter":{},"headers":[],"relativePath":"docs/知识库/RAG/RAGFlow源码分析/README.md","filePath":"docs/知识库/RAG/RAGFlow源码分析/README.md"}'),l={name:"docs/知识库/RAG/RAGFlow源码分析/README.md"};function t(k,s,p,e,d,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="wip-ragflow源码分析" tabindex="-1">(WIP)RAGFlow源码分析 <a class="header-anchor" href="#wip-ragflow源码分析" aria-label="Permalink to &quot;(WIP)RAGFlow源码分析&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 智能体模块（对话流控制）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # RESTful API接口层</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepdoc/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 深度文档解析核心（OCR/表格/图像处理）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> graphrag/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 图增强RAG实现（知识图谱融合）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rag/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # RAG核心逻辑（检索/重排序/生成）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 容器化部署配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sdk/python/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Python SDK开发工具包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 前端交互界面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置文件类（.env,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyproject.toml等）</span></span></code></pre></div><ul><li>多模态文件解析：<code>deepdoc/</code></li><li>增强检索层：<code>rag/retrieval/</code></li><li>LLM适配框架：<code>rag/generation</code></li></ul><h2 id="文件上传-解析" tabindex="-1">文件上传 &amp; 解析 <a class="header-anchor" href="#文件上传-解析" aria-label="Permalink to &quot;文件上传 &amp; 解析&quot;">​</a></h2><h3 id="文件解析" tabindex="-1">文件解析 <a class="header-anchor" href="#文件解析" aria-label="Permalink to &quot;文件解析&quot;">​</a></h3><blockquote><p>api/db/services/task_service.py：实际文件解析</p></blockquote><p>根据不同类型设置单个任务最多处理的页数</p><ul><li>pdf 类型默认处理12页，<code>doc[&quot;parser_id&quot;] == &quot;paper&quot;</code> 类型的 pdf 一个任务处理22页</li><li>table 类型单个任务处理3000行</li></ul><p>文件的解析是根据内容拆分为多个不同任务，通过 <code>Redis</code> 消息队列进行暂存，然后进行离线异步处理</p><h3 id="消息队列消费" tabindex="-1">消息队列消费 <a class="header-anchor" href="#消息队列消费" aria-label="Permalink to &quot;消息队列消费&quot;">​</a></h3><blockquote><p>rag/svr/task_executor.py：实际文件解析所产生的队列处理</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DONE_TASKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FAILED_TASKS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    redis_msg, task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collect()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logging.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handle_task begin for task </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.dumps(task)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CURRENT_TASKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[task[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy.deepcopy(task)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> do_handle_task(task)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DONE_TASKS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CURRENT_TASKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pop(task[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logging.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handle_task done for task </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.dumps(task)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        FAILED_TASKS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CURRENT_TASKS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pop(task[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            err_msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e, exceptiongroup.ExceptionGroup):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.exceptions[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                err_msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; -- &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            set_progress(task[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[Exception]: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err_msg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            pass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logging.exception(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handle_task got exception for task </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.dumps(task)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    redis_msg.ack()</span></span></code></pre></div><ul><li>调用 <code>collect()</code> 方法从消息队列中获取任务</li><li>为每一个任务依次调用 <code>build()</code> 进行文件的解析</li><li>调用 <code>embedding()</code> 方法进行向量化</li><li>最终调用 <code>ELASTICSEARCH.bulk()</code></li></ul><h4 id="build" tabindex="-1">build() <a class="header-anchor" href="#build" aria-label="Permalink to &quot;build()&quot;">​</a></h4><p>根据不同文件类型调用不同的文件解析器</p><blockquote><p>比如：rag/app/naive.py 包含了目前主流的 docx、pdf、xlsx、md 等文档的解析</p></blockquote><p>涉及到的解析代码放在 <code>deepdoc/parser</code></p><h2 id="文件检索-得到检索结果" tabindex="-1">文件检索-&gt;得到检索结果 <a class="header-anchor" href="#文件检索-得到检索结果" aria-label="Permalink to &quot;文件检索-&gt;得到检索结果&quot;">​</a></h2><ul><li>对话的API放在 \`\`</li><li>实际处理对话的逻辑代码放在：<code>api/db/services/dialog_service.py</code></li></ul><p>文件的检索放在 <code>rag/nlp/search.py</code> 的 <code>search()</code> 完成，目前实现的是混合搜索</p><ul><li>文本搜索</li><li>向量搜索</li></ul><h2 id="检索结果的重排" tabindex="-1">检索结果的重排 <a class="header-anchor" href="#检索结果的重排" aria-label="Permalink to &quot;检索结果的重排&quot;">​</a></h2><blockquote><p>代码放在：<code>rag/nlp/search.py</code> 的 <code>rerank()</code></p></blockquote><p>重排是基于文本匹配得分 + 向量匹配得分混合进行排序，默认文本匹配的权重为 0.3, 向量匹配的权重为 0.7</p><h2 id="构建大模型输入的prompt" tabindex="-1">构建大模型输入的prompt <a class="header-anchor" href="#构建大模型输入的prompt" aria-label="Permalink to &quot;构建大模型输入的prompt&quot;">​</a></h2><p>在调用大模型前会调用 <code>api/db/services/dialog_service.py</code> 文件中 <code>message_fit_in()</code> 根据大模型可用的 token 数量进行过滤</p><p>将<code>检索的内容</code>，<code>历史聊天记录</code>以及<code>问题</code>构造为 <code>prompt</code>，即可作为大模型的输入</p><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><ol><li><a href="https://blog.csdn.net/hustyichi/article/details/139162109" target="_blank" rel="noreferrer">https://blog.csdn.net/hustyichi/article/details/139162109</a></li></ol>`,29)]))}const g=i(l,[["render",t]]);export{E as __pageData,g as default};
