import{_ as s,c as l,a0 as i,o as e}from"./chunks/framework.OqxnQCTf.js";const r=JSON.parse('{"title":"RAG核心基础概念总结","description":"","frontmatter":{},"headers":[],"relativePath":"基础原理/RAG/RAG核心基础概念总结.md","filePath":"基础原理/RAG/RAG核心基础概念总结.md"}'),n={name:"基础原理/RAG/RAG核心基础概念总结.md"};function o(t,a,p,d,c,u){return e(),l("div",null,a[0]||(a[0]=[i(`<h1 id="rag核心基础概念总结" tabindex="-1">RAG核心基础概念总结 <a class="header-anchor" href="#rag核心基础概念总结" aria-label="Permalink to &quot;RAG核心基础概念总结&quot;">​</a></h1><ul><li>语义</li><li>意图</li><li>相似问</li><li>关键字</li><li>标签</li></ul><h2 id="语义" tabindex="-1">语义 <a class="header-anchor" href="#语义" aria-label="Permalink to &quot;语义&quot;">​</a></h2><p>语言所承载意义或者意图，从技术上可以理解为：模型通过向量空间对语言所表达的&quot;概念&quot;、&quot;关系&quot;、&quot;意图&quot;的数字化抽象表示</p><p>比如</p><ul><li>&quot;猫&quot;和&quot;狗&quot;的向量距离，会比&quot;猫&quot;和&quot;汽车&quot;更近</li></ul><p>比如</p><ul><li>&quot;苹果很好吃。&quot; → &quot;苹果&quot; ≈ 水果</li><li>&quot;我买了一部苹果。&quot; → &quot;苹果&quot; ≈ 手机品牌</li></ul><h2 id="意图" tabindex="-1">意图 <a class="header-anchor" href="#意图" aria-label="Permalink to &quot;意图&quot;">​</a></h2><p><code>意图</code>是用户说这句话<code>想干什么</code>，例如</p><ul><li>&quot;怎么重置密码&quot; =&gt; 意图 = <code>password_reset</code></li><li>&quot;你们支持退款吗&quot; =&gt; 意图 = <code>ask_refund_policy</code></li></ul><hr><p><code>意图</code>是从<code>语义</code>中提炼出来的，要判断一句话的意图，需要先理解它的语义，例如：</p><ul><li>用户输入: &quot;我密码忘了，登不进去&quot;</li><li>语义理解: 用户表达了&quot;登录失败&quot;，原因是&quot;忘记密码&quot;</li><li>意图判断: <code>password_reset</code></li></ul><p>意图是有限的，语义是无限的</p><ul><li>意图：ask_refund_policy</li><li>用户可能说： <ul><li>&quot;能退钱吗？&quot;</li><li>&quot;我不想要了，怎么退款？&quot;</li><li>&quot;下单错了，支持退货退款吗？&quot;</li><li>&quot;支付后反悔了，有后悔药没？&quot;</li><li>&quot;这个东西我不满意，你们怎么处理？&quot;</li></ul></li></ul><p>➡️ 如果没有语义理解能力，你必须为每一种表达都&quot;人工标注&quot;它属于哪个意图 —— 成本极高，且无法覆盖长尾表达。</p><p>LLM 的语义理解能力，让你无需穷举所有问法，也能泛化识别出它们属于同一个意图</p><hr><p>单纯使用<code>语义</code>，可能会导致<code>过度泛化</code>，输出不可控</p><p>单纯使用<code>意图</code>，无法覆盖未知意图，长尾表达难处理（在真实世界中，长尾表达才是常态。能处理长尾，才能真正&quot;听得懂人话&quot;）</p><blockquote><p>长尾表达（Long-tail Expressions）：成千上万种低频、非标、口语化、个性化、甚至语法错误的问法 ===&gt; 用户用各种你想不到的方式，表达同一个意图</p></blockquote><h3 id="语义-意图结合" tabindex="-1">语义 + 意图结合 <a class="header-anchor" href="#语义-意图结合" aria-label="Permalink to &quot;语义 + 意图结合&quot;">​</a></h3><ol><li>第一阶段（语义检索）：用户提问-&gt;生成语义向量-&gt;chunk向量库检索TopK片段</li><li>第二阶段（意图判断，可选）：对用户提问进行意图分类，比如是<code>password_reset</code>，则检索某一个标签下的<code>chunks</code></li><li>第三阶段（生成答案）：LLM结合检索到chunks(语义相关 + 意图上下文)，生成最终答案</li></ol><h2 id="相似问" tabindex="-1">相似问 <a class="header-anchor" href="#相似问" aria-label="Permalink to &quot;相似问&quot;">​</a></h2><p>与语义结合增强<code>泛化</code>和<code>召回</code></p><p>语义 + 相似问 = 理解用户可能怎么问</p><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><p>LLM的语义向量有时候过于泛化，关键字提供<code>硬匹配</code>能力</p><ul><li>过滤与排序：在检索阶段，先用关键字过滤掉完全不相关的文档，再用语义向量排序</li><li>混合检索：很多RAG系统都采用<code>关键字匹配</code> + <code>语义检索</code>的混合模式，兼顾准确率和召回率</li></ul><p>语义 + 关键字 = 平衡<code>模块匹配</code> + <code>精确匹配</code></p><h2 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h2><p>人为定义的、用于分类或者标记内容的元数据，为语义理解提供了<code>结构化约束</code>和<code>业务上下文</code></p><ul><li>缩小检索范围：可以限定在某一个标签下检索避免返回无关内容</li><li>领域适配：不同标签对应不同领域的知识，可以加载不同的LLM提示词</li><li>权限与路由：某些标签对特定用户可见</li></ul><p>在<code>RagFlow</code>中，标签集可以作为<code>封闭域知识</code>的补充，引导LLM输出符合业务规范的答案</p><p>语义 + 标签 = 理解内容属于哪个领域/类别</p><h3 id="如何通过语义-知道-是哪个标签" tabindex="-1">如何通过语义&quot;知道&quot;是哪个标签 <a class="header-anchor" href="#如何通过语义-知道-是哪个标签" aria-label="Permalink to &quot;如何通过语义&quot;知道&quot;是哪个标签&quot;">​</a></h3><h4 id="_1-语义向量相似度匹配" tabindex="-1">1. 语义向量相似度匹配 <a class="header-anchor" href="#_1-语义向量相似度匹配" aria-label="Permalink to &quot;1. 语义向量相似度匹配&quot;">​</a></h4><ul><li>为每一个标签预先定义一个或者多个代表句，将这些代表句编码为向量，作为<code>标签向量</code></li><li>当有新的chunk或者用户问题进来时，计算其语义向量与所有<code>标签向量</code>的相似度 =&gt; 得出预测标签</li></ul><h4 id="_2-提供正确示例让llm进行标签判断" tabindex="-1">2. 提供正确示例让LLM进行标签判断 <a class="header-anchor" href="#_2-提供正确示例让llm进行标签判断" aria-label="Permalink to &quot;2. 提供正确示例让LLM进行标签判断&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请根据以下示例，为新问题打上最合适的标签。可选标签：[账户管理, 支付问题, 产品咨询]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>示例1：</span></span>
<span class="line"><span>问题：怎么修改登录密码？</span></span>
<span class="line"><span>标签：账户管理</span></span>
<span class="line"><span></span></span>
<span class="line"><span>示例2：</span></span>
<span class="line"><span>问题：付款时提示失败怎么办？</span></span>
<span class="line"><span>标签：支付问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>示例3：</span></span>
<span class="line"><span>问题：这个报表能导出成 Excel 吗？</span></span>
<span class="line"><span>标签：产品咨询</span></span>
<span class="line"><span></span></span>
<span class="line"><span>新问题：我忘记密码了，能重设吗？</span></span>
<span class="line"><span>标签：</span></span></code></pre></div><p>缺点：</p><ul><li>成本较高（每次调用 LLM）；</li><li>适合对准确率要求极高、或标签体系复杂的场景；</li></ul><h4 id="_3-训练一个语义分类模块" tabindex="-1">3. 训练一个语义分类模块 <a class="header-anchor" href="#_3-训练一个语义分类模块" aria-label="Permalink to &quot;3. 训练一个语义分类模块&quot;">​</a></h4><p>收集问题+标签，训练模型</p><p>缺点：</p><ul><li>需要标注数据，启动成本高；</li><li>标签体系变更时需重新训练或微调；</li><li>长尾表达泛化能力不如 LLM</li></ul><h3 id="ragflow如何标记标签" tabindex="-1">RagFlow如何标记标签 <a class="header-anchor" href="#ragflow如何标记标签" aria-label="Permalink to &quot;RagFlow如何标记标签&quot;">​</a></h3><p>通过 API 上传 Chunk 时标记标签</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;如何重置RagFlow管理员密码？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;账户管理&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;系统管理&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,50)]))}const q=s(n,[["render",o]]);export{r as __pageData,q as default};
